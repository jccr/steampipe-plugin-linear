// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/jccr/steampipe-plugin-linear/gql/internal"
)

// __listIssueInput is used internally by genqlient
type __listIssueInput struct {
	First int    `json:"first,omitempty"`
	After string `json:"after,omitempty"`
}

// GetFirst returns __listIssueInput.First, and is useful for accessing the field via an interface.
func (v *__listIssueInput) GetFirst() int { return v.First }

// GetAfter returns __listIssueInput.After, and is useful for accessing the field via an interface.
func (v *__listIssueInput) GetAfter() string { return v.After }

// listIssueIssuesIssueConnection includes the requested fields of the GraphQL type IssueConnection.
type listIssueIssuesIssueConnection struct {
	PageInfo listIssueIssuesIssueConnectionPageInfo     `json:"pageInfo"`
	Nodes    []listIssueIssuesIssueConnectionNodesIssue `json:"nodes"`
}

// GetPageInfo returns listIssueIssuesIssueConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnection) GetPageInfo() listIssueIssuesIssueConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns listIssueIssuesIssueConnection.Nodes, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnection) GetNodes() []listIssueIssuesIssueConnectionNodesIssue {
	return v.Nodes
}

// listIssueIssuesIssueConnectionNodesIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type listIssueIssuesIssueConnectionNodesIssue struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The time at which the entity was created.
	CreatedAt time.Time `json:"createdAt"`
	// The last time at which the entity was updated. This is the same as the creation time if the
	// entity hasn't been update after creation.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt time.Time `json:"archivedAt"`
	// The issue's unique number.
	Number float64 `json:"number"`
	// The issue's title.
	Title string `json:"title"`
	// The issue's description in markdown format.
	Description string `json:"description"`
	// The priority of the issue.
	Priority float64 `json:"priority"`
	// The estimate of the complexity of the issue..
	Estimate float64 `json:"estimate"`
	// The order of the item in relation to other items in the organization.
	SortOrder float64 `json:"sortOrder"`
	// The time at which the issue was moved into started state.
	StartedAt time.Time `json:"startedAt"`
	// The time at which the issue was moved into completed state.
	CompletedAt time.Time `json:"completedAt"`
	// The time at which the issue was moved into canceled state.
	CanceledAt time.Time `json:"canceledAt"`
	// The time at which the issue was automatically closed by the auto pruning process.
	AutoClosedAt time.Time `json:"autoClosedAt"`
	// The time at which the issue was automatically archived by the auto pruning process.
	AutoArchivedAt time.Time `json:"autoArchivedAt"`
	// The date at which the issue is due.
	DueDate time.Time `json:"-"`
	// A flag that indicates whether the issue is in the trash bin.
	Trashed bool `json:"trashed"`
	// The time until an issue will be snoozed in Triage view.
	SnoozedUntilAt time.Time `json:"snoozedUntilAt"`
	// The team that the issue is associated with.
	Team *listIssueIssuesIssueConnectionNodesIssueTeam `json:"team"`
	// The cycle that the issue is associated with.
	Cycle *listIssueIssuesIssueConnectionNodesIssueCycle `json:"cycle"`
	// The project that the issue is associated with.
	Project *listIssueIssuesIssueConnectionNodesIssueProject `json:"project"`
	// Previous identifiers of the issue if it has been moved between teams.
	PreviousIdentifiers []string `json:"previousIdentifiers"`
	// The user who created the issue.
	Creator *listIssueIssuesIssueConnectionNodesIssueCreatorUser `json:"creator"`
	// The user to whom the issue is assigned to.
	Assignee *listIssueIssuesIssueConnectionNodesIssueAssigneeUser `json:"assignee"`
	// The user who snoozed the issue.
	SnoozedBy *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser `json:"snoozedBy"`
	// The workflow state that the issue is associated with.
	State *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState `json:"state"`
	// The parent of the issue.
	Parent *listIssueIssuesIssueConnectionNodesIssueParentIssue `json:"parent"`
	// The order of the item in the sub-issue list. Only set if the issue has a parent.
	SubIssueSortOrder float64 `json:"subIssueSortOrder"`
	// Label for the priority.
	PriorityLabel string `json:"priorityLabel"`
	// Issue's human readable identifier (e.g. ENG-123).
	Identifier string `json:"identifier"`
	// Issue URL.
	Url string `json:"url"`
	// Suggested branch name for the issue.
	BranchName string `json:"branchName"`
	// Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk).
	CustomerTicketCount int `json:"customerTicketCount"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssue.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetId() string { return v.Id }

// GetCreatedAt returns listIssueIssuesIssueConnectionNodesIssue.CreatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns listIssueIssuesIssueConnectionNodesIssue.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetArchivedAt returns listIssueIssuesIssueConnectionNodesIssue.ArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetArchivedAt() time.Time { return v.ArchivedAt }

// GetNumber returns listIssueIssuesIssueConnectionNodesIssue.Number, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetNumber() float64 { return v.Number }

// GetTitle returns listIssueIssuesIssueConnectionNodesIssue.Title, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetTitle() string { return v.Title }

// GetDescription returns listIssueIssuesIssueConnectionNodesIssue.Description, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetDescription() string { return v.Description }

// GetPriority returns listIssueIssuesIssueConnectionNodesIssue.Priority, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetPriority() float64 { return v.Priority }

// GetEstimate returns listIssueIssuesIssueConnectionNodesIssue.Estimate, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetEstimate() float64 { return v.Estimate }

// GetSortOrder returns listIssueIssuesIssueConnectionNodesIssue.SortOrder, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetSortOrder() float64 { return v.SortOrder }

// GetStartedAt returns listIssueIssuesIssueConnectionNodesIssue.StartedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetStartedAt() time.Time { return v.StartedAt }

// GetCompletedAt returns listIssueIssuesIssueConnectionNodesIssue.CompletedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCompletedAt() time.Time { return v.CompletedAt }

// GetCanceledAt returns listIssueIssuesIssueConnectionNodesIssue.CanceledAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCanceledAt() time.Time { return v.CanceledAt }

// GetAutoClosedAt returns listIssueIssuesIssueConnectionNodesIssue.AutoClosedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetAutoClosedAt() time.Time { return v.AutoClosedAt }

// GetAutoArchivedAt returns listIssueIssuesIssueConnectionNodesIssue.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetAutoArchivedAt() time.Time {
	return v.AutoArchivedAt
}

// GetDueDate returns listIssueIssuesIssueConnectionNodesIssue.DueDate, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetDueDate() time.Time { return v.DueDate }

// GetTrashed returns listIssueIssuesIssueConnectionNodesIssue.Trashed, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetTrashed() bool { return v.Trashed }

// GetSnoozedUntilAt returns listIssueIssuesIssueConnectionNodesIssue.SnoozedUntilAt, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetSnoozedUntilAt() time.Time {
	return v.SnoozedUntilAt
}

// GetTeam returns listIssueIssuesIssueConnectionNodesIssue.Team, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetTeam() *listIssueIssuesIssueConnectionNodesIssueTeam {
	return v.Team
}

// GetCycle returns listIssueIssuesIssueConnectionNodesIssue.Cycle, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCycle() *listIssueIssuesIssueConnectionNodesIssueCycle {
	return v.Cycle
}

// GetProject returns listIssueIssuesIssueConnectionNodesIssue.Project, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetProject() *listIssueIssuesIssueConnectionNodesIssueProject {
	return v.Project
}

// GetPreviousIdentifiers returns listIssueIssuesIssueConnectionNodesIssue.PreviousIdentifiers, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetPreviousIdentifiers() []string {
	return v.PreviousIdentifiers
}

// GetCreator returns listIssueIssuesIssueConnectionNodesIssue.Creator, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCreator() *listIssueIssuesIssueConnectionNodesIssueCreatorUser {
	return v.Creator
}

// GetAssignee returns listIssueIssuesIssueConnectionNodesIssue.Assignee, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetAssignee() *listIssueIssuesIssueConnectionNodesIssueAssigneeUser {
	return v.Assignee
}

// GetSnoozedBy returns listIssueIssuesIssueConnectionNodesIssue.SnoozedBy, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetSnoozedBy() *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser {
	return v.SnoozedBy
}

// GetState returns listIssueIssuesIssueConnectionNodesIssue.State, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetState() *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState {
	return v.State
}

// GetParent returns listIssueIssuesIssueConnectionNodesIssue.Parent, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetParent() *listIssueIssuesIssueConnectionNodesIssueParentIssue {
	return v.Parent
}

// GetSubIssueSortOrder returns listIssueIssuesIssueConnectionNodesIssue.SubIssueSortOrder, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetSubIssueSortOrder() float64 {
	return v.SubIssueSortOrder
}

// GetPriorityLabel returns listIssueIssuesIssueConnectionNodesIssue.PriorityLabel, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetPriorityLabel() string { return v.PriorityLabel }

// GetIdentifier returns listIssueIssuesIssueConnectionNodesIssue.Identifier, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetIdentifier() string { return v.Identifier }

// GetUrl returns listIssueIssuesIssueConnectionNodesIssue.Url, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetUrl() string { return v.Url }

// GetBranchName returns listIssueIssuesIssueConnectionNodesIssue.BranchName, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetBranchName() string { return v.BranchName }

// GetCustomerTicketCount returns listIssueIssuesIssueConnectionNodesIssue.CustomerTicketCount, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssue) GetCustomerTicketCount() int {
	return v.CustomerTicketCount
}

func (v *listIssueIssuesIssueConnectionNodesIssue) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listIssueIssuesIssueConnectionNodesIssue
		DueDate json.RawMessage `json:"dueDate"`
		graphql.NoUnmarshalJSON
	}
	firstPass.listIssueIssuesIssueConnectionNodesIssue = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DueDate
		src := firstPass.DueDate
		if len(src) != 0 && string(src) != "null" {
			err = internal.UnmarshalDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal listIssueIssuesIssueConnectionNodesIssue.DueDate: %w", err)
			}
		}
	}
	return nil
}

type __premarshallistIssueIssuesIssueConnectionNodesIssue struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ArchivedAt time.Time `json:"archivedAt"`

	Number float64 `json:"number"`

	Title string `json:"title"`

	Description string `json:"description"`

	Priority float64 `json:"priority"`

	Estimate float64 `json:"estimate"`

	SortOrder float64 `json:"sortOrder"`

	StartedAt time.Time `json:"startedAt"`

	CompletedAt time.Time `json:"completedAt"`

	CanceledAt time.Time `json:"canceledAt"`

	AutoClosedAt time.Time `json:"autoClosedAt"`

	AutoArchivedAt time.Time `json:"autoArchivedAt"`

	DueDate json.RawMessage `json:"dueDate"`

	Trashed bool `json:"trashed"`

	SnoozedUntilAt time.Time `json:"snoozedUntilAt"`

	Team *listIssueIssuesIssueConnectionNodesIssueTeam `json:"team"`

	Cycle *listIssueIssuesIssueConnectionNodesIssueCycle `json:"cycle"`

	Project *listIssueIssuesIssueConnectionNodesIssueProject `json:"project"`

	PreviousIdentifiers []string `json:"previousIdentifiers"`

	Creator *listIssueIssuesIssueConnectionNodesIssueCreatorUser `json:"creator"`

	Assignee *listIssueIssuesIssueConnectionNodesIssueAssigneeUser `json:"assignee"`

	SnoozedBy *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser `json:"snoozedBy"`

	State *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState `json:"state"`

	Parent *listIssueIssuesIssueConnectionNodesIssueParentIssue `json:"parent"`

	SubIssueSortOrder float64 `json:"subIssueSortOrder"`

	PriorityLabel string `json:"priorityLabel"`

	Identifier string `json:"identifier"`

	Url string `json:"url"`

	BranchName string `json:"branchName"`

	CustomerTicketCount int `json:"customerTicketCount"`
}

func (v *listIssueIssuesIssueConnectionNodesIssue) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listIssueIssuesIssueConnectionNodesIssue) __premarshalJSON() (*__premarshallistIssueIssuesIssueConnectionNodesIssue, error) {
	var retval __premarshallistIssueIssuesIssueConnectionNodesIssue

	retval.Id = v.Id
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ArchivedAt = v.ArchivedAt
	retval.Number = v.Number
	retval.Title = v.Title
	retval.Description = v.Description
	retval.Priority = v.Priority
	retval.Estimate = v.Estimate
	retval.SortOrder = v.SortOrder
	retval.StartedAt = v.StartedAt
	retval.CompletedAt = v.CompletedAt
	retval.CanceledAt = v.CanceledAt
	retval.AutoClosedAt = v.AutoClosedAt
	retval.AutoArchivedAt = v.AutoArchivedAt
	{

		dst := &retval.DueDate
		src := v.DueDate
		var err error
		*dst, err = internal.MarshalDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal listIssueIssuesIssueConnectionNodesIssue.DueDate: %w", err)
		}
	}
	retval.Trashed = v.Trashed
	retval.SnoozedUntilAt = v.SnoozedUntilAt
	retval.Team = v.Team
	retval.Cycle = v.Cycle
	retval.Project = v.Project
	retval.PreviousIdentifiers = v.PreviousIdentifiers
	retval.Creator = v.Creator
	retval.Assignee = v.Assignee
	retval.SnoozedBy = v.SnoozedBy
	retval.State = v.State
	retval.Parent = v.Parent
	retval.SubIssueSortOrder = v.SubIssueSortOrder
	retval.PriorityLabel = v.PriorityLabel
	retval.Identifier = v.Identifier
	retval.Url = v.Url
	retval.BranchName = v.BranchName
	retval.CustomerTicketCount = v.CustomerTicketCount
	return &retval, nil
}

// listIssueIssuesIssueConnectionNodesIssueAssigneeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listIssueIssuesIssueConnectionNodesIssueAssigneeUser struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueAssigneeUser.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueAssigneeUser) GetId() string { return v.Id }

// listIssueIssuesIssueConnectionNodesIssueCreatorUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listIssueIssuesIssueConnectionNodesIssueCreatorUser struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueCreatorUser.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCreatorUser) GetId() string { return v.Id }

// listIssueIssuesIssueConnectionNodesIssueCycle includes the requested fields of the GraphQL type Cycle.
// The GraphQL type's documentation follows.
//
// A set of issues to be resolved in a specified amount of time.
type listIssueIssuesIssueConnectionNodesIssueCycle struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueCycle.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueCycle) GetId() string { return v.Id }

// listIssueIssuesIssueConnectionNodesIssueParentIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type listIssueIssuesIssueConnectionNodesIssueParentIssue struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueParentIssue.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueParentIssue) GetId() string { return v.Id }

// listIssueIssuesIssueConnectionNodesIssueProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// A project.
type listIssueIssuesIssueConnectionNodesIssueProject struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueProject.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueProject) GetId() string { return v.Id }

// listIssueIssuesIssueConnectionNodesIssueSnoozedByUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user that has access to the the resources of an organization.
type listIssueIssuesIssueConnectionNodesIssueSnoozedByUser struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueSnoozedByUser.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueSnoozedByUser) GetId() string { return v.Id }

// listIssueIssuesIssueConnectionNodesIssueStateWorkflowState includes the requested fields of the GraphQL type WorkflowState.
// The GraphQL type's documentation follows.
//
// A state in a team workflow.
type listIssueIssuesIssueConnectionNodesIssueStateWorkflowState struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueStateWorkflowState.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueStateWorkflowState) GetId() string { return v.Id }

// listIssueIssuesIssueConnectionNodesIssueTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type listIssueIssuesIssueConnectionNodesIssueTeam struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetId returns listIssueIssuesIssueConnectionNodesIssueTeam.Id, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionNodesIssueTeam) GetId() string { return v.Id }

// listIssueIssuesIssueConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type listIssueIssuesIssueConnectionPageInfo struct {
	// Indicates if there are more results when paginating forward.
	HasNextPage bool `json:"hasNextPage"`
	// Cursor representing the last result in the paginated results.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns listIssueIssuesIssueConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetEndCursor returns listIssueIssuesIssueConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *listIssueIssuesIssueConnectionPageInfo) GetEndCursor() string { return v.EndCursor }

// listIssueResponse is returned by listIssue on success.
type listIssueResponse struct {
	// All issues.
	Issues listIssueIssuesIssueConnection `json:"issues"`
}

// GetIssues returns listIssueResponse.Issues, and is useful for accessing the field via an interface.
func (v *listIssueResponse) GetIssues() listIssueIssuesIssueConnection { return v.Issues }

func listIssue(
	ctx context.Context,
	client graphql.Client,
	first int,
	after string,
) (*listIssueResponse, error) {
	__input := __listIssueInput{
		First: first,
		After: after,
	}
	var err error

	var retval listIssueResponse
	err = client.MakeRequest(
		ctx,
		"listIssue",
		`
query listIssue ($first: Int, $after: String) {
	issues(first: $first, after: $after) {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			id
			createdAt
			updatedAt
			archivedAt
			number
			title
			description
			priority
			estimate
			sortOrder
			startedAt
			completedAt
			canceledAt
			autoClosedAt
			autoArchivedAt
			dueDate
			trashed
			snoozedUntilAt
			team {
				id
			}
			cycle {
				id
			}
			project {
				id
			}
			previousIdentifiers
			creator {
				id
			}
			assignee {
				id
			}
			snoozedBy {
				id
			}
			state {
				id
			}
			parent {
				id
			}
			subIssueSortOrder
			priorityLabel
			identifier
			url
			branchName
			customerTicketCount
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}
